{# --- x chart Field -- #}
{% macro xChart(chartOptions) %}
    <script>
        document.addEventListener('DOMContentLoaded', function () { var chartOptionsData = {{ chartOptions.datasets|json_encode|raw }}; var id = "{{ chartOptions.id|default('epaphroditeChart')|e('js') }}"; var useLegende = {{ chartOptions.useLegende|default(true)|json_encode|raw }};var chartLabel = "{{ chartOptions.label|default('Epaphrodite Example Chart')|e('js') }}"; var orientation = "{{ chartOptions.orientation is defined ? chartOptions.orientation|e('js') : 'vertical' }}";var indexAxis = orientation === 'horizontal' ? 'y' : 'x'; var chartElement = document.getElementById(id);var computedStyle = getComputedStyle(chartElement);var inheritedTextColor = computedStyle.color || 'inherit';var inheritedBackgroundColor = computedStyle.backgroundColor || 'transparent'; var globalLabelsSet = new Set(); var datasets = chartOptionsData.map(function(dataset) {     dataset.data.forEach(function(item) {  var label = item[dataset.keys];  if (label) {      globalLabelsSet.add(label);  }     });     var data = dataset.data.map(function(item) {  return item[dataset.values];     });     var backgroundColors = dataset.color || ['rgba(255, 99, 132, 0.2)'];     var borderColors = dataset.borderColor || backgroundColors.map(color => color.replace(/0.2\)$/, "1)"));     return {  type: dataset.chartType || 'bar',  label: dataset.label,  data: data,  backgroundColor: backgroundColors,  borderColor: borderColors,  borderWidth: dataset.border || 1,  tension: dataset.radius || 0,     }; }); var globalLabels = Array.from(globalLabelsSet); createXChart(id, globalLabels, datasets, chartLabel, useLegende, indexAxis, inheritedTextColor); }); function createXChart(chartId, labels, datasets, chartLabel, useLegende, indexAxis, inheritedTextColor) { var ctx = document.getElementById(chartId).getContext('2d'); new Chart(ctx, {     type: 'bar',     data: {  labels: labels,  datasets: datasets     },     options: {  responsive: true, maintainAspectRatio: false, color: inheritedTextColor, indexAxis: indexAxis, scales : ['pie', 'doughnut'].includes(datasets[0].type) ? {} : {      x :{      beginAtZero: true,   grid: {display: false   },   ticks: {color: inheritedTextColor,   }      },     y: {    beginAtZero: true,   ticks: {color: inheritedTextColor   },   grid: {color: 'rgba(0,0,0,0.1)'   }      }  },  plugins: {      legend: {   display: useLegende == 'true' ? true : false,   position: 'bottom',   labels: { usePointStyle: true,pointStyle: 'circle',generateLabels: function(chart) {    var legendItems = [];    chart.data.datasets.forEach((dataset, i) => { dataset.data.forEach((value, index) => {     legendItems.push({  text: chart.data.labels[index] + " : " + value,  fillStyle: dataset.backgroundColor[index] || dataset.backgroundColor     }); });    });    return legendItems;       }   }      },      title: {   display: true,   text: chartLabel,  padding: 15,  font: {      weight: 'bold',      size: 20  },  color: inheritedTextColor     }  }     } }); }
   </script>
{% endmacro %}
{# --- End x chart Field -- #}

{# --- Chart --- #}
{% macro charts(chartOptions) %}
    <script> function isLightColor(color) {const rgb = hexToRgb(color);if (!rgb) return true;const luminance = (0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b) / 255;return luminance > 0.5;}function hexToRgb(hex) {if (!hex) return null;if (hex.startsWith('rgb')) {const match = hex.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*[\d.]+)?\)/);if (match) {return {r: parseInt(match[1]),g: parseInt(match[2]),b: parseInt(match[3])};}}hex = hex.replace(/^#/, '');if (hex.length === 3) {hex = hex.split('').map(char => char + char).join('');}if (hex.length === 6) {return {r: parseInt(hex.substr(0, 2), 16),g: parseInt(hex.substr(2, 2), 16),b: parseInt(hex.substr(4, 2), 16)};}return null;}function generateDefaultColors(count) {const palette = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF','#FF9F40', '#8AC24A', '#F06292', '#7986CB', '#A1887F'];return palette.slice(0, Math.min(count, palette.length));}document.addEventListener('DOMContentLoaded', function () {var pourcentage = {{ chartOptions.pourcentage is defined ? chartOptions.pourcentage|lower : 'true' }};var chartOptionsData = {{ chartOptions.datasets|json_encode|raw }};var id = "{{ chartOptions.id is defined ? chartOptions.id|e('js') : 'epaphroditeChart' }}";var chartLabel = "{{ chartOptions.label is defined ? chartOptions.label|e('js') : chartOptions.datasets[0].keys|join(' vs ')|e('js') }}";var orientation = "{{ chartOptions.orientation is defined ? chartOptions.orientation|e('js') : 'vertical' }}";var position = "{{ chartOptions.position is defined ? chartOptions.position|e('js') : 'bottom' }}";var indexAxis = orientation === 'horizontal' ? 'y' : 'x';var chartElement = document.getElementById(id);var computedStyle = getComputedStyle(chartElement);var inheritedTextColor = computedStyle.color || 'inherit';var inheritedBackgroundColor = computedStyle.backgroundColor || 'transparent';var dataset = chartOptionsData[0];var itemCount = Math.min(dataset.keys.length, dataset.values.length);var globalLabels = dataset.data.slice(0, itemCount).map((item, index) => {return item[dataset.keys[index]] || '';});var datasets = chartOptionsData.map(function(dataset) {var limitedData = dataset.data.slice(0, itemCount);var totalDataset = limitedData.reduce(function(sum, item, index) {return sum + (item[dataset.values[index]] || 0);}, 0);var chartType = dataset.chartType || 'bar';var isPieLike = ['pie', 'doughnut'].includes(chartType);var isBarOrLine = ['bar', 'line'].includes(chartType);var backgroundColors = (dataset.color || generateDefaultColors(itemCount)).slice(0, itemCount);if (isBarOrLine && dataset.legendLabels) {backgroundColors = Array(itemCount).fill(dataset.color ? dataset.color[0] : generateDefaultColors(1)[0]);}var borderColors = backgroundColors.map(color => color.startsWith('rgba') ? color.replace(/[\d\.]+\)$/, '1)') : color);var textColors = backgroundColors.map(color => isLightColor(color) ? '#000000' : '#FFFFFF');var legendLabel = dataset.label || dataset.keys.slice(0, itemCount).join(' vs ');if (isBarOrLine && dataset.legendLabels) {legendLabel = dataset.legendLabels.slice(0, itemCount);}return {label: isBarOrLine && dataset.legendLabels ? legendLabel : [legendLabel],data: limitedData.map((item, index) => {const value = item[dataset.values[index]] || 0;return pourcentage && totalDataset > 0 ? (value / totalDataset * 100) : value;}),backgroundColor: backgroundColors,borderColor: borderColors,borderWidth: dataset.border || 1,textColor: textColors,type: chartType,originalValues: limitedData.map((item, index) => item[dataset.values[index]] || 0)};});generateChart(id, globalLabels, datasets, chartLabel, indexAxis, position, pourcentage, inheritedTextColor, inheritedBackgroundColor);});function generateChart(chartId, labels, datasets, chartLabel, indexAxis, position, pourcentage, inheritedTextColor, inheritedBackgroundColor) {var ctx = document.getElementById(chartId).getContext('2d');new Chart(ctx, {type: datasets[0].type || 'bar',data: {labels: labels,datasets: datasets},options: {responsive: true,maintainAspectRatio: false,indexAxis: indexAxis,color: inheritedTextColor,scales: ['pie', 'doughnut'].includes(datasets[0].type) ? {} : {x: { beginAtZero: true,grid: { display: false, color: 'transparent' },ticks: { color: inheritedTextColor }},y: {beginAtZero: true,ticks: {color: inheritedTextColor,callback: function(value) {return pourcentage ? value + '%' : value;}},grid: { color: 'rgba(0,0,0,0.1)' }}},plugins: {legend: {display: true,position: position,labels: {usePointStyle: true,pointStyle: 'circle',color: inheritedTextColor}},tooltip: {backgroundColor: inheritedBackgroundColor,titleColor: inheritedTextColor,bodyColor: inheritedTextColor,borderColor: inheritedTextColor,callbacks: {label: function(tooltipItem) {const dataset = tooltipItem.dataset;const index = tooltipItem.dataIndex;const originalValue = dataset.originalValues[index];return `${labels[index]}: ${originalValue.toLocaleString()}`;}}},title: {color: inheritedTextColor,display: true,text: chartLabel,padding: 10,font: { weight: 'bold', size: 17 }},datalabels: {display: true,align: 'center',color: function(context) {return context.dataset.textColor?.[context.dataIndex] || (isLightColor(context.dataset.backgroundColor[context.dataIndex]) ? '#000000' : '#FFFFFF');},font: { weight: 'bold', size: 14 },formatter: function(value, context) {return pourcentage ? value.toFixed(0) + '%' : context.dataset.originalValues?.[context.dataIndex] || value;}}}},plugins: [ChartDataLabels]});}      
</script>
{% endmacro %}
{# --- End Chart --- #}

{# --- Echart --- #}
{% macro echarts(chartOptions) %}
    <script>
        function isLightColor(color) {const rgb = hexToRgb(color);if (!rgb) return true;const luminance = (0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b) / 255;return luminance > 0.5;}function hexToRgb(hex) {if (!hex) return null;if (hex.startsWith('rgb')) {const match = hex.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*[\d.]+)?\)/);if (match) {return {r: parseInt(match[1]),g: parseInt(match[2]),b: parseInt(match[3])};}}hex = hex.replace(/^#/, '');if (hex.length === 3) {hex = hex.split('').map(char => char + char).join('');}if (hex.length === 6) {return {r: parseInt(hex.substr(0, 2), 16),g: parseInt(hex.substr(2, 2), 16),b: parseInt(hex.substr(4, 2), 16)};}return null;}document.addEventListener('DOMContentLoaded', function () {var pourcentage = {{ chartOptions.pourcentage is defined ? chartOptions.pourcentage|lower : 'true' }};var chartOptionsData = {{ chartOptions.datasets|json_encode|raw }};var id = "{{ chartOptions.id is defined ? chartOptions.id|e('js') : 'epaphroditeChart' }}";var chartLabel = "{{ chartOptions.label is defined ? chartOptions.label|e('js') : chartOptions.datasets[0].keys|join(' vs ')|e('js') }}";var orientation = "{{ chartOptions.orientation is defined ? chartOptions.orientation|e('js') : 'vertical' }}";var position = "{{ chartOptions.position is defined ? chartOptions.position|e('js') : 'bottom' }}";var chartElement = document.getElementById(id);var computedStyle = getComputedStyle(chartElement);var inheritedTextColor = computedStyle.color || 'inherit';var inheritedBackgroundColor = computedStyle.backgroundColor || 'transparent';var keyLabel = chartOptionsData[0].keyLabel === "true";var keys = chartOptionsData[0].keys;var datasetData = chartOptionsData[0].data;var globalLabels = keys.map(function (key, index) {if (keyLabel) {return key;} else {return datasetData[index]?.[key] || key;}});var seriesData = chartOptionsData.map(function (dataset) {var totalDataset = dataset.data.reduce(function (sum, item) {return sum + dataset.values.reduce(function (subSum, valueKey) {return subSum + (item[valueKey] !== undefined ? item[valueKey] : 0);}, 0);}, 0);var originalValues = dataset.values.map(function (valueKey) {return dataset.data.reduce(function (sum, item) {const value = item[valueKey] !== undefined ? item[valueKey] : 0;return sum + value;}, 0);});var data = dataset.values.map(function (valueKey, index) {var value = dataset.data.reduce(function (sum, item) {const itemValue = item[valueKey] !== undefined ? item[valueKey] : 0;return sum + (pourcentage && totalDataset > 0 ? (itemValue / totalDataset * 100) : itemValue);}, 0);return {value: value,originalValue: originalValues[index],name: keyLabel ? valueKey : dataset.data[index]?.[keys[index]] || valueKey};});var backgroundColors = dataset.color || [];var textColors = backgroundColors.map(color =>isLightColor(color) ? '#000000' : '#ffffff');return {type: dataset.chartType || 'bar',name: dataset.label || dataset.values.join(' '),data: data,backgroundColor: backgroundColors.length ? backgroundColors : ['rgba(54, 162, 235, 0.2)'],itemStyle: {color: function (params) {return backgroundColors[params.dataIndex] || 'rgba(54, 162, 235, 0.2)';}},label: {show: true,formatter: function (params) {return pourcentage ? params.percent + '%' : params.value;},color: function (params) {const backgroundColor = backgroundColors[params.dataIndex];return isLightColor(backgroundColor) ? '#000000' : '#ffffff';}}};});generateEChart(id, globalLabels, seriesData, chartLabel, orientation, position, pourcentage, inheritedTextColor, inheritedBackgroundColor);});function generateEChart(chartId, labels, series, chartLabel, orientation, position, pourcentage, inheritedTextColor, inheritedBackgroundColor) {var chart = echarts.init(document.getElementById(chartId));var isHorizontal = orientation === 'horizontal';var option = {title: {text: chartLabel,textStyle: {color: inheritedTextColor,fontWeight: 'bold',fontSize: 17}},tooltip: {trigger: 'axis',axisPointer: { type: 'shadow' },backgroundColor: inheritedBackgroundColor,textStyle: {color: inheritedTextColor},formatter: function(params) {return params.map(param => {const originalValue = param.data.originalValue.toLocaleString();return `${param.name}: ${originalValue}`;}).join('<br>');}},legend: {data: series.map(s => s.name),textStyle: {color: inheritedTextColor},bottom: position},grid: {left: '3%',right: '4%',bottom: '3%',containLabel: true},xAxis: {type: 'category',data: labels,axisLabel: {color: inheritedTextColor},axisLine: {lineStyle: {color: inheritedTextColor}}},yAxis: {type: 'value',axisLabel: {color: inheritedTextColor,formatter: function(value) {return pourcentage ? value + '%' : value;}},axisLine: {lineStyle: {color: inheritedTextColor}}},series: series};if (isHorizontal) {[option.xAxis, option.yAxis] = [option.yAxis, option.xAxis];}if (['pie', 'doughnut'].includes(series[0].type)) {option = {title: {text: chartLabel,textStyle: {color: inheritedTextColor,fontWeight: 'bold',fontSize: 17}},tooltip: {trigger: 'item',formatter: function(params) {const originalValue = params.data.originalValue.toLocaleString();return `${params.name}: ${originalValue} (${params.percent}%)`;}},legend: {data: series[0].data.map(d => d.name),textStyle: {color: inheritedTextColor},bottom: position},series: [{type: 'pie',radius: series[0].type === 'doughnut' ? ['40%', '70%'] : '70%',avoidLabelOverlap: false,itemStyle: series[0].itemStyle,label: series[0].label,data: series[0].data}]};}chart.setOption(option);}
    </script>
{% endmacro %}
{# --- End Echart --- #}

{# --- scatted Chart --- #}
{% macro scattedChart(scattedChartOptions) %}
    <script>
        function getContrastYIQ(hexcolor) {hexcolor = hexcolor.replace('#', '');const r = parseInt(hexcolor.substr(0,2),16);const g = parseInt(hexcolor.substr(2,2),16);const b = parseInt(hexcolor.substr(4,2),16);const yiq = ((r*299)+(g*587)+(b*114))/1000;return (yiq >= 128) ? '#000000' : '#ffffff';}const datasets = {{ scattedChartOptions.datasets | json_encode | raw }};const position = "{{ scattedChartOptions.position | default('bottom') }}";const useKeyLabel = {{ scattedChartOptions.keyLabel | default('false') }};const chartLabel = "{{ scattedChartOptions.label|default('EChart')|e('js') }}";const containerElement = document.getElementById("{{ scattedChartOptions.id | default('epaphroditeEChart') | e('js') }}");const defaultColors = containerElement ? ['getComputedStyle(containerElement).color', '#FF6F61', '#F39C12', '#2ECC71', '#8E44AD'] : ['#3398DB', '#FF6F61', '#F39C12', '#2ECC71', '#8E44AD'];const id = "{{ scattedChartOptions.id | default('epaphroditeEChart') | e('js') }}";const pourcentage = {{ scattedChartOptions.pourcentage | default(true) | json_encode | raw }};const orientation = "{{ scattedChartOptions.orientation | default('vertical') | e('js') }}";const legendValues = datasets[0].values;const processDatasets = (datasets) => {let allKeys = new Set();let processedData = [];let keyLabelMapping = {};if (useKeyLabel === true) {const firstDataset = datasets[0];const uniqueDataValues = new Set(firstDataset.data.map(item => item[firstDataset.keys[0]]));firstDataset.keys.forEach((key, index) => {const values = Array.from(uniqueDataValues);if (values[index]) {keyLabelMapping[values[index]] = key;}});}datasets.forEach(dataset => {dataset.data.forEach(item => {allKeys.add(item[dataset.keys[0]]);});});allKeys = Array.from(allKeys);datasets.forEach((dataset, datasetIndex) => {const values = dataset.values;const data = dataset.data;const colors = dataset.color || defaultColors.map(color => color === 'getComputedStyle(containerElement).color' ? getComputedStyle(containerElement).color : color);const dataMap = data.reduce((acc, item) => {acc[item[dataset.keys[0]]] = item;return acc;}, {});values.forEach((value, valueIndex) => {const seriesData = allKeys.map(key => {const dayData = dataMap[key] || {};let val = dayData[value] || 0;if (pourcentage === 'true') {const total = values.reduce((sum, v) => sum + (dayData[v] || 0), 0);val = total > 0 ? (val / total) * 100 : 0;}return val;});const seriesColor = colors[valueIndex] || colors[0];processedData.push({name: value,type: 'bar',stack: `Dataset ${datasetIndex + 1}`,label: {show: true,position: 'inside',formatter: function(params) {let value = params.value;return pourcentage === 'true' ? `${Math.round(value)}%` : Math.round(value);},color: getContrastYIQ(seriesColor.replace('#', '')),fontWeight: 'bold'},emphasis: {focus: 'series'},color: seriesColor,data: seriesData});});});const categories = useKeyLabel === true ? allKeys.map(key => keyLabelMapping[key] || key): allKeys;return {series: processedData,categories: categories};};const { series, categories } = processDatasets(datasets);const containerBackgroundColor = containerElement ? getComputedStyle(containerElement).backgroundColor : 'transparent';const option = {backgroundColor: containerBackgroundColor,title: {text: chartLabel,left: 'center',top: position === 'top' ? 0 : 5,textStyle: {color: getComputedStyle(containerElement || document.body).color}},tooltip: {trigger: 'axis',axisPointer: {type: 'shadow'},formatter: function(params) {let result = params[0].name + '</br>';let processedNames = new Set();params.forEach(item => {if (!processedNames.has(item.seriesName)) {const value = pourcentage === 'true' ? `${Math.round(item.value)}%` : Math.round(item.value);result += `<span style="display:inline-block;width:10px;float:left;height:12px;top:50px;background-color:${item.color};margin-right:2px;"></span>${item.seriesName}: ${value}<br/>`;processedNames.add(item.seriesName);}});return result;}},legend: {[position]: 0,orient: position === 'top' || position === 'bottom' ? 'horizontal' : 'vertical',textStyle: { color: getComputedStyle(containerElement || document.body).color },padding: position === 'bottom' || position === 'top' ? [10, 0, 20, 0] : [0, 10],data: legendValues},xAxis: {type: orientation === 'vertical' ? 'value' : 'category',data: orientation === 'vertical' ? null : categories,axisLine: {show: true,lineStyle: { color: '#ccc' }},axisLabel: { color: getComputedStyle(containerElement || document.body).color },splitLine: {lineStyle: {color: '#f0f0f0'}}},yAxis: {type: orientation === 'vertical' ? 'category' : 'value',data: orientation === 'vertical' ? categories : null,axisLine: {lineStyle: { color: '#ccc' }},axisLabel: { color: getComputedStyle(containerElement || document.body).color }},series: series,grid: {right: position === 'right' ? 80 : 15,left: position === 'left' ? 80 : 5,bottom: position === 'bottom' ? 80 : 5,top: position === 'top' ? 80 : '15%',containLabel: true}};const chart = echarts.init(document.getElementById(id));chart.setOption(option);window.addEventListener('resize', function() {chart.resize();});
    </script>
{% endmacro %}
{# --- End scatted Chart --- #}
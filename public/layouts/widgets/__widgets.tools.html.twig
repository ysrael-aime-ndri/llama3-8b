{# --- Recognition -- #}
{% macro recognition(recognitionOptions) %}
    <script> document.addEventListener('DOMContentLoaded', function() { var toggleButton = document.getElementById('{{ recognitionOptions.button is defined and recognitionOptions.button ? recognitionOptions.button }}'); var transcriptionText = document.getElementById('{{ recognitionOptions.field is defined and recognitionOptions.field ? recognitionOptions.field }}');if ('webkitSpeechRecognition' in window) { var recognition = new webkitSpeechRecognition(); var defaultLanguage = window.navigator.language; recognition.lang = defaultLanguage; recognition.continuous = true; recognition.interimResults = true; var isRecording = false; toggleButton.addEventListener('click', function() { if (isRecording) { recognition.stop(); } else { recognition.start(); } }); recognition.onresult = function(event) { var interim_transcript = ''; var final_transcript = ''; for (var i = 0; i < event.results.length; ++i) { if (event.results[i].isFinal) { final_transcript += event.results[i][0].transcript; } else {  interim_transcript += event.results[i][0].transcript; } } transcriptionText.value = final_transcript + interim_transcript; }; recognition.onerror = function(event) { console.error("Speech recognition error:", event.error); }; recognition.onstart = function() { toggleButton.innerHTML = '<i class="{{ recognitionOptions.muteIcon | default('bi bi-mic-mute') }}"></i>'; isRecording = true; toggleButton.classList.add('recording'); }; recognition.onend = function() { toggleButton.innerHTML = '<i class="{{ recognitionOptions.muteIcon | default('bi bi-mic') }}"></i>'; isRecording = false; toggleButton.classList.remove('recording'); };} else { console.error("The SpeechRecognition API is not supported by your browser."); toggleButton.disabled = true; }}); </script>
{% endmacro %}
{# --- End Recognition -- #}

{# ----- Copy content ----- #}
{% macro copy(copyOptions) %}
    <script> async function copyContent() { var textField = document.getElementById("{{ copyOptions.content is defined and copyOptions.content ? copyOptions.content }}"); var copyButton = document.getElementById("{{ copyOptions.button is defined and copyOptions.button ? copyOptions.button }}"); if (!textField) { console.error("The textToCopy element was not found."); return; } if (!copyButton) { console.error("The copyButton element was not found."); return; } try { await navigator.clipboard.writeText(textField.value); {% if copyOptions.iconFinal is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconFinal }}'></i> {{ copyOptions.final }}"; {% else %} copyButton.textContent = "{{ copyOptions.final | default('Copied!') }}"; {% endif %} setTimeout(function() { {% if copyOptions.iconInit is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconInit }}'></i> {{ copyOptions.init }}"; {% else %}  copyButton.textContent = "{{ copyOptions.init | default('Copy text') }}"; {% endif %} }, 2000); } catch (err) { console.error("Failed to copy text: ", err); copyButton.textContent = "Failed to copy text."; setTimeout(function() { {% if copyOptions.iconInit is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconInit }}'></i> {{ copyOptions.init }}"; {% else %} copyButton.textContent = "{{ copyOptions.init | default('Copy text') }}"; {% endif %}  }, 2000); } } </script>
{% endmacro %}
{# ----- End Copy content ----- #}

{# --- Clock Field -- #}
{% macro clock(options) %}
    <div class="digital-clock"><div class="week">{% for day in options.days %}<div>{{ day }}</div>{% endfor %}</div><div class="time"><div class="hour">00</div><div class="dot">:</div><div class="min">00</div><div class="dot">:</div><div class="sec">00</div></div><div class="date"></div></div><script>function updateClock() {const now = new Date();const hours = now.getHours().toString().padStart(2, '0');const minutes = now.getMinutes().toString().padStart(2, '0');const seconds = now.getSeconds().toString().padStart(2, '0');const day = now.getDay();const days = {{ options.days | json_encode | raw }};document.querySelectorAll('.week div').forEach((el, index) => {el.textContent = days[index];el.classList.toggle('active', index === day);});const lang = '{{ options.lang }}' || 'en-GB';const options = { day: 'numeric', month: 'long', year: 'numeric' };const formattedDate = now.toLocaleDateString(lang, options);document.querySelector('.hour').textContent = hours;document.querySelector('.min').textContent = minutes;document.querySelector('.sec').textContent = seconds;document.querySelector('.date').textContent = formattedDate;}updateClock();setInterval(updateClock, 1000);</script>
{% endmacro %}
{# --- End Clock Field -- #}

{# --- Calendar Field -- #}
{% macro calendar(options) %}
    <div id="calendar"></div><script>function generateCalendar(monthOffset = 0) {const calendar = document.getElementById('calendar');const now = new Date();let currentMonth = now.getMonth();let currentYear = now.getFullYear();let totalMonths = currentYear * 12 + currentMonth + monthOffset;let year = Math.floor(totalMonths / 12);let month = totalMonths % 12;const jsDay = new Date(year, month, 1).getDay();const firstDay = (jsDay + 6) % 7;const lastDate = new Date(year, month + 1, 0).getDate();const lang = '{{ options.lang }}' || 'en';const monthNamesArray = [];for (let i = 0; i < 12; i++) {const date = new Date(year, i, 1);monthNamesArray.push(new Intl.DateTimeFormat(lang, { month: 'long' }).format(date).toUpperCase());}const dayNamesArray = [];for (let i = 0; i < 7; i++) {const date = new Date(1970, 0, 5 + i);dayNamesArray.push(new Intl.DateTimeFormat(lang, { weekday: 'short' }).format(date).toUpperCase());}let calendarHTML = `<div class="calendar-header"><button onclick="generateCalendar(${monthOffset - 1})"><i class="bi bi-arrow-left"></i></button><span>${monthNamesArray[month]} ${year}</span><button onclick="generateCalendar(${monthOffset + 1})"><i class="bi bi-arrow-right"></i></button></div>`;calendarHTML += '<div class="calendar-body">';dayNamesArray.forEach(day => {calendarHTML += `<div class="calendar-day-name">${day}</div>`;});for (let i = 0; i < firstDay; i++) {calendarHTML += '<div class="calendar-day empty"></div>';}for (let date = 1; date <= lastDate; date++) {const isToday = date === now.getDate() &&month === now.getMonth() &&year === now.getFullYear();const todayClass = isToday ? 'today' : '';calendarHTML += `<div class="calendar-day ${todayClass}">${date}</div>`;}calendarHTML += '</div>';calendar.innerHTML = calendarHTML;}document.addEventListener('DOMContentLoaded', () => generateCalendar());</script>
{% endmacro %}
{# --- End Calendar Field -- #}

{# --- Progress Field -- #}
{% macro progressMeter(options) %}
    <div class="gauge-container"><div class="gauge" id="gauge" data-progress="{{ options.indicator }}"><span id="percentage">0%</span></div></div>
{% endmacro %}
{# --- End Progress Field -- #}

{# --- Start Ollama API bot -- #}
{% macro ollamaChatBot(options) %}
    <script src="{{__js('markdown/marked.min')}}"></script><script>(function () {const conversationId = '{{ options.conversationId }}';const textareaId = '{{ options.textareaId }}';const buttonId = '{{ options.buttonId }}';const loadingIcon = 'bi bi-hourglass';const processingIcon = 'bi bi-snow2';const apiLink = 'http://localhost:11434/api/generate';const model = '{{ options.model | default("llama3:8b") }}';const maxTokens = {{ options.max_tokens | default(3000) }};const temperature = {{ options.temperature | default(0.6) }};const botName = '{{ options.botName | default("Ollama") }}';const usersName = '{{ options.usersName | default("You") }}';const statusIcon = document.getElementById('{{ options.statusIcon | default("statusIcon") }}');function getRecentMessages(maxMessages = 5) {const conversation = document.getElementById(conversationId);const messages = Array.from(conversation.children);return messages.slice(-maxMessages).map(msg => msg.textContent).join('\n');}function estimateTokens(text) {return text.split(/\s+/).length + text.split(/[\.,:;\(\)]/).length - 1;}function appendMessage(content, sender = 'system') {const conversation = document.getElementById(conversationId);const message = document.createElement('div');message.style.marginBottom = '8px';if (sender === 'user') {message.innerHTML = `<strong>${usersName}:</strong>\n ${content}`;message.style.color = '#333';} else if (sender === 'bot') {message.innerHTML = `<strong>${botName}:</strong> ${content}`;message.style.color = '#333';} else {message.textContent = content;message.style.color = 'red';}conversation.appendChild(message);conversation.scrollTop = conversation.scrollHeight;}async function readStream(response, onFragment) {const reader = response.body.getReader();const decoder = new TextDecoder();let result = '';while (true) {const { done, value } = await reader.read();if (done) break;const chunk = decoder.decode(value);const lines = chunk.split('\n').filter(line => line.trim() !== '');for (const line of lines) {try {const json = JSON.parse(line);if (json.response) {result += json.response;onFragment(json.response);}} catch (e) {console.error('Error parsing JSON in the stream:', e, 'Ligne:', line);}}}return result;} async function sendToOllama() {const textarea = document.getElementById(textareaId);const button = document.getElementById(buttonId);const prompt = textarea.value.trim();if (!prompt) {appendMessage('Please enter your prompt.', 'error');return;}appendMessage(prompt, 'user');textarea.value = '';textarea.disabled = true;button.disabled = true;statusIcon.className = `${loadingIcon} pulse-animation`;const recentMessages = getRecentMessages();const fullPrompt = `${recentMessages}\n${usersName}:\n${prompt}\n\n${botName}: `;const conversation = document.getElementById(conversationId);const newMessage = document.createElement('div');newMessage.innerHTML = `<strong>${botName}:</strong> `;newMessage.style.color = '#333';conversation.appendChild(newMessage);conversation.scrollTop = conversation.scrollHeight;const mdContent = document.createElement('div');mdContent.style.marginTop = '4px';mdContent.style.fontSize = '0.95em';newMessage.appendChild(mdContent);try {const response = await fetch(apiLink, {method: 'POST',headers: { 'Content-Type': 'application/json' },body: JSON.stringify({model: model,prompt: fullPrompt,max_tokens: maxTokens,temperature: temperature,stream: true})});if (!response.ok) {throw new Error(`HTTP Error: ${response.status} ${response.statusText}`);}statusIcon.className = `${processingIcon} spin-animation`;let accumulated = '';await readStream(response, (fragment) => {accumulated += fragment;mdContent.innerHTML = marked.parse(accumulated);conversation.scrollTop = conversation.scrollHeight;});textarea.disabled = false;button.disabled = false;statusIcon.className = 'bi bi-arrow-up-circle-fill';} catch (error) {console.error('Error:', error);appendMessage(`Error communicating with Ollama: ${error.message}`, 'error');textarea.disabled = false;button.disabled = false;statusIcon.className = 'bi bi-arrow-up-circle-fill';}}document.addEventListener('DOMContentLoaded', function () {const button = document.getElementById(buttonId);if (button) {button.addEventListener('click', sendToOllama);} else {console.warn('Buttom not found with l\'ID:', buttonId);}const textarea = document.getElementById(textareaId);textarea.addEventListener('keydown', function(event) {if (event.key === 'Enter') {event.preventDefault();sendToOllama();}});});})();</script><style>#{{ options.conversationId }} div pre,#{{ options.conversationId }} div code {color: #dc143c;padding: 0.5em;border-radius: 6px;overflow-x: auto;font-size: 0.95em;line-height: 1.5;font-weight: 900;}#{{ options.conversationId }} div pre {margin: 0.8em 0;background: #222222;font-weight: 100;}#{{ options.conversationId }} div pre code {font-weight: 200;color: #fff;}#{{ options.conversationId }} div h1,#{{ options.conversationId }} div h2,#{{ options.conversationId }} div h3 {font-weight: bold;margin: 0.8em 0 0.4em;color: #222;}#{{ options.conversationId }} div ul,#{{ options.conversationId }} div ol {margin: 0.5em 0 0.5em 1.5em;padding-left: 1em;}#{{ options.conversationId }} div p {margin: 0.5em 0;line-height: 1.6;}#{{ options.conversationId }} div a {color: #dc143c;font-weight: 400;text-decoration: underline;}#{{ options.conversationId }} div blockquote {margin: 0.5em 0;padding-left: 1em;border-left: 3px solid #ccc;color: #666;font-style: italic;}.spin-animation {display: inline-block;animation: spin360 1s linear infinite;}.pulse-animation {display: inline-block;animation: pulse 1s ease-in-out infinite;}@keyframes spin360 {from { transform: rotate(0deg); }to { transform: rotate(360deg); }}@keyframes pulse {0% { transform: scale(1); }50% { transform: scale(1.3); }100% { transform: scale(1); }}</style>
{% endmacro %}
{# --- End -- #}
{# --- Recognition -- #}
{% macro recognition(recognitionOptions) %}
    <script> document.addEventListener('DOMContentLoaded', function() { var toggleButton = document.getElementById('{{ recognitionOptions.button is defined and recognitionOptions.button ? recognitionOptions.button }}'); var transcriptionText = document.getElementById('{{ recognitionOptions.field is defined and recognitionOptions.field ? recognitionOptions.field }}');if ('webkitSpeechRecognition' in window) { var recognition = new webkitSpeechRecognition(); var defaultLanguage = window.navigator.language; recognition.lang = defaultLanguage; recognition.continuous = true; recognition.interimResults = true; var isRecording = false; toggleButton.addEventListener('click', function() { if (isRecording) { recognition.stop(); } else { recognition.start(); } }); recognition.onresult = function(event) { var interim_transcript = ''; var final_transcript = ''; for (var i = 0; i < event.results.length; ++i) { if (event.results[i].isFinal) { final_transcript += event.results[i][0].transcript; } else {  interim_transcript += event.results[i][0].transcript; } } transcriptionText.value = final_transcript + interim_transcript; }; recognition.onerror = function(event) { console.error("Speech recognition error:", event.error); }; recognition.onstart = function() { toggleButton.innerHTML = '<i class="{{ recognitionOptions.muteIcon | default('bi bi-mic-mute') }}"></i>'; isRecording = true; toggleButton.classList.add('recording'); }; recognition.onend = function() { toggleButton.innerHTML = '<i class="{{ recognitionOptions.muteIcon | default('bi bi-mic') }}"></i>'; isRecording = false; toggleButton.classList.remove('recording'); };} else { console.error("The SpeechRecognition API is not supported by your browser."); toggleButton.disabled = true; }}); </script>
{% endmacro %}
{# --- End Recognition -- #}

{# ----- Copy content ----- #}
{% macro copy(copyOptions) %}
    <script> async function copyContent() { var textField = document.getElementById("{{ copyOptions.content is defined and copyOptions.content ? copyOptions.content }}"); var copyButton = document.getElementById("{{ copyOptions.button is defined and copyOptions.button ? copyOptions.button }}"); if (!textField) { console.error("The textToCopy element was not found."); return; } if (!copyButton) { console.error("The copyButton element was not found."); return; } try { await navigator.clipboard.writeText(textField.value); {% if copyOptions.iconFinal is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconFinal }}'></i> {{ copyOptions.final }}"; {% else %} copyButton.textContent = "{{ copyOptions.final | default('Copied!') }}"; {% endif %} setTimeout(function() { {% if copyOptions.iconInit is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconInit }}'></i> {{ copyOptions.init }}"; {% else %}  copyButton.textContent = "{{ copyOptions.init | default('Copy text') }}"; {% endif %} }, 2000); } catch (err) { console.error("Failed to copy text: ", err); copyButton.textContent = "Failed to copy text."; setTimeout(function() { {% if copyOptions.iconInit is defined %} copyButton.innerHTML = "<i class='{{ copyOptions.iconInit }}'></i> {{ copyOptions.init }}"; {% else %} copyButton.textContent = "{{ copyOptions.init | default('Copy text') }}"; {% endif %}  }, 2000); } } </script>
{% endmacro %}
{# ----- End Copy content ----- #}

{# --- Clock Field -- #}
{% macro clock(options) %}
    <div class="digital-clock"><div class="week">{% for day in options.days %}<div>{{ day }}</div>{% endfor %}</div><div class="time"><div class="hour">00</div><div class="dot">:</div><div class="min">00</div><div class="dot">:</div><div class="sec">00</div></div><div class="date"></div></div><script>function updateClock() {const now = new Date();const hours = now.getHours().toString().padStart(2, '0');const minutes = now.getMinutes().toString().padStart(2, '0');const seconds = now.getSeconds().toString().padStart(2, '0');const day = now.getDay();const days = {{ options.days | json_encode | raw }};document.querySelectorAll('.week div').forEach((el, index) => {el.textContent = days[index];el.classList.toggle('active', index === day);});const lang = '{{ options.lang }}' || 'en-GB';const options = { day: 'numeric', month: 'long', year: 'numeric' };const formattedDate = now.toLocaleDateString(lang, options);document.querySelector('.hour').textContent = hours;document.querySelector('.min').textContent = minutes;document.querySelector('.sec').textContent = seconds;document.querySelector('.date').textContent = formattedDate;}updateClock();setInterval(updateClock, 1000);</script>
{% endmacro %}
{# --- End Clock Field -- #}

{# --- Calendar Field -- #}
{% macro calendar(options) %}
    <div id="calendar"></div><script>function generateCalendar(monthOffset = 0) {const calendar = document.getElementById('calendar');const now = new Date();let currentMonth = now.getMonth();let currentYear = now.getFullYear();let totalMonths = currentYear * 12 + currentMonth + monthOffset;let year = Math.floor(totalMonths / 12);let month = totalMonths % 12;const jsDay = new Date(year, month, 1).getDay();const firstDay = (jsDay + 6) % 7;const lastDate = new Date(year, month + 1, 0).getDate();const lang = '{{ options.lang }}' || 'en';const monthNamesArray = [];for (let i = 0; i < 12; i++) {const date = new Date(year, i, 1);monthNamesArray.push(new Intl.DateTimeFormat(lang, { month: 'long' }).format(date).toUpperCase());}const dayNamesArray = [];for (let i = 0; i < 7; i++) {const date = new Date(1970, 0, 5 + i);dayNamesArray.push(new Intl.DateTimeFormat(lang, { weekday: 'short' }).format(date).toUpperCase());}let calendarHTML = `<div class="calendar-header"><button onclick="generateCalendar(${monthOffset - 1})"><i class="bi bi-arrow-left"></i></button><span>${monthNamesArray[month]} ${year}</span><button onclick="generateCalendar(${monthOffset + 1})"><i class="bi bi-arrow-right"></i></button></div>`;calendarHTML += '<div class="calendar-body">';dayNamesArray.forEach(day => {calendarHTML += `<div class="calendar-day-name">${day}</div>`;});for (let i = 0; i < firstDay; i++) {calendarHTML += '<div class="calendar-day empty"></div>';}for (let date = 1; date <= lastDate; date++) {const isToday = date === now.getDate() &&month === now.getMonth() &&year === now.getFullYear();const todayClass = isToday ? 'today' : '';calendarHTML += `<div class="calendar-day ${todayClass}">${date}</div>`;}calendarHTML += '</div>';calendar.innerHTML = calendarHTML;}document.addEventListener('DOMContentLoaded', () => generateCalendar());</script>
{% endmacro %}
{# --- End Calendar Field -- #}

{# --- Progress Field -- #}
{% macro progressMeter(options) %}
    <div class="gauge-container"><div class="gauge" id="gauge" data-progress="{{ options.indicator }}"><span id="percentage">0%</span></div></div>
{% endmacro %}
{# --- End Progress Field -- #}

{# --- Start Ollama API bot -- #}
{% macro ollamaChatBot(options) %}
    <script src="{{__js('markdown/marked.min')}}"></script><script> (function () { const conversationId = '{{ options.conversationId }}'; const textareaId = '{{ options.textareaId }}'; const buttonId = '{{ options.buttonId }}'; const loadingIcon = '{{ options.loadingIcon | default("bi bi-hourglass") }}'; const processingIcon = '{{ options.processingIcon | default("bi bi-snow2") }}'; const archivePath = '{{ __path(options.path) }}'; const apiLink = '{{ options.apiLink | default("http://localhost:11434/api/generate") }}'; const model = '{{ options.model | default("llama3:8b") }}'; const maxTokens = {{ options.max_tokens | default(3000) }}; const temperature = {{ options.temperature | default(0.6) }}; const botName = '{{ options.botName | default("Epaphrodites") }}'; const usersName = '{{ options.usersName | default("You") }}'; const statusIconId = '{{ options.statusIcon | default("statusIcon") }}'; const historyLimit = {{ options.historyLimit | default(10) }}; const timeoutDuration = {{ options.timeout | default(60000) }}; function getRecentMessages(maxMessages = historyLimit) { const conversation = document.getElementById(conversationId); if (!conversation) { console.warn('Conversation element not found:', conversationId); return ''; } const messages = Array.from(conversation.children); return messages.slice(-maxMessages).map(msg => msg.textContent).join('\n'); } function detectLanguage(text) { const frenchPatterns = [ /[àâçéèêëîïôûùüÿœæ]/i, /\b(le|la|les|un|une|des|est|sont|vous|comment|bonjour|merci|ça|tu|votre|notre|qui|que|quoi|pourquoi|comment)\b/i ]; const englishPatterns = [ /\b(the|and|is|are|you|how|hello|thanks|what|your|our|who|which|why|how)\b/i ]; const frCount = frenchPatterns.reduce((count, pattern) =>  count + (pattern.test(text) ? 1 : 0), 0); const enCount = englishPatterns.reduce((count, pattern) =>  count + (pattern.test(text) ? 1 : 0), 0); const botLang = frCount >= enCount ? 'fr' : 'en'; sessionStorage.setItem('ollama_lang', botLang); console.log('Language detected:', botLang); return botLang; } const compactInstructions = { fr: (botName) => `# Instructions pour ${botName} Tu es ${botName}, assistant `, en: (botName) => `# Instructions for ${botName} You are ${botName}, an expert assistant` }; async function epaphroditesInstruction(lang = 'fr', botName) { const fallbackLang = lang in compactInstructions ? lang : 'fr'; const compactInstruction = compactInstructions[fallbackLang](botName); try { if (!botName) throw new Error('botName is required'); if (!archivePath) throw new Error('archivePath is not defined'); const cachedInstruction = sessionStorage.getItem(`${botName}_instructions_${lang}`); if (cachedInstruction) { console.log('Using cached instructions'); return cachedInstruction; } const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), 3000); const instructionResponse = await fetch(archivePath, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ __lang__: lang, __botName__: botName }), signal: controller.signal }); clearTimeout(timeoutId); if (!instructionResponse.ok) { throw new Error(`HTTP error! status: ${instructionResponse.status}`); } const responseText = await instructionResponse.text(); if (responseText && responseText.length > 20) { sessionStorage.setItem(`${botName}_instructions_${lang}`, responseText.trim()); } return responseText.trim(); } catch (error) { console.warn('Server instructions not available, using compact instructions instead:', error); return compactInstruction; } } async function readStream(response, onFragment) { const reader = response.body.getReader(); const decoder = new TextDecoder(); let result = ''; try { while (true) { const { done, value } = await reader.read(); if (done) break; const chunk = decoder.decode(value); const lines = chunk.split('\n').filter(line => line.trim() !== ''); for (const line of lines) { try { const json = JSON.parse(line); if (json.response) { result += json.response; onFragment(json.response); } } catch (e) { console.error('Error parsing JSON in stream:', e, 'Line:', line); } } } } catch (streamError) { console.error('Stream error:', streamError); } return result; } async function sendToOllama() { console.log('sendToOllama called'); const textarea = document.getElementById(textareaId); const button = document.getElementById(buttonId); const statusIcon = document.getElementById(statusIconId); if (!textarea || !button) { console.error('Textarea or button not found:', textareaId, buttonId); appendMessage('Error: Interface elements not found.', 'error'); return; } const prompt = textarea.value.trim(); if (!prompt) { appendMessage('Please enter a prompt.', 'error'); return; } appendMessage(prompt, 'user'); textarea.value = ''; textarea.disabled = true; button.disabled = true; if (statusIcon) statusIcon.className = `${loadingIcon} pulse-animation`; const recentMessages = getRecentMessages(); const userLang = detectLanguage(prompt); try { const conversation = document.getElementById(conversationId); if (!conversation) { throw new Error('Conversation element not found'); } const newMessage = document.createElement('div'); newMessage.innerHTML = `<strong>${botName}:</strong> `; newMessage.style.color = '#333'; conversation.appendChild(newMessage); conversation.scrollTop = conversation.scrollHeight; const mdContent = document.createElement('div'); mdContent.style.marginTop = '4px'; mdContent.style.fontSize = '0.95em'; newMessage.appendChild(mdContent); mdContent.innerHTML = '<em class="loadAnsers">Loading the response...</em>'; const instructionPromise = epaphroditesInstruction(userLang, botName); if (!apiLink) throw new Error('Ollama API link is not defined'); let instruction; try { const instructionTimeout = setTimeout(() => { throw new Error('Instruction timeout'); }, 5000); instruction = await instructionPromise; clearTimeout(instructionTimeout); } catch (instructionError) { console.warn('Error while retrieving the instructions:', instructionError); instruction = `You are ${botName} an assistant.`; } const fullPrompt = `${instruction}\n${usersName}:\n${prompt}\n\n${botName}: `; const controller = new AbortController(); const timeoutId = setTimeout(() => { controller.abort(); mdContent.innerHTML = marked.parse("Sorry, the timeout has been exceeded. Please try again."); }, timeoutDuration); const response = await fetch(apiLink, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ model: model, prompt: fullPrompt, max_tokens: maxTokens, temperature: temperature, stream: true }), signal: controller.signal }); clearTimeout(timeoutId); if (!response.ok) { throw new Error(`HTTP Error: ${response.status} ${response.statusText}`); } if (statusIcon) statusIcon.className = `${processingIcon} spin-animation`; let accumulated = ''; await readStream(response, (fragment) => { accumulated += fragment; try { mdContent.innerHTML = marked.parse(accumulated); } catch (e) { console.error('Error parsing Markdown:', e); mdContent.innerHTML = accumulated; } conversation.scrollTop = conversation.scrollHeight; }); try { const archiveResponse = await fetch(archivePath.replace('instructions', 'archive'), { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ __prompt__: prompt, __response__: accumulated, __lang__: userLang, timestamp: new Date().toISOString() }) }); if (!archiveResponse.ok) { console.warn('Error archiving conversation'); } else { const archiveResult = await archiveResponse.json(); console.log('Archive response:', archiveResult); } } catch (archiveError) { console.error('Error archiving conversation:', archiveError); } } catch (error) { console.error('Error in sendToOllama:', error); appendMessage(`Error: ${error.message}`, 'error'); } finally { textarea.disabled = false; button.disabled = false; textarea.focus(); if (statusIcon) statusIcon.className = 'bi bi-arrow-up-circle-fill'; } } function appendMessage(content, sender = 'system') { const conversation = document.getElementById(conversationId); if (!conversation) { console.warn('Conversation element not found:', conversationId); return; } const message = document.createElement('div'); message.style.marginBottom = '12px'; message.classList.add('chat-message', `message-${sender}`); if (sender === 'user') { message.innerHTML = `<strong>${usersName}:</strong> ${content}`; message.style.color = '#333'; } else if (sender === 'bot') { message.innerHTML = `<strong>${botName}:</strong> ${content}`; message.style.color = '#333'; } else { message.textContent = content; message.style.color = 'red'; } conversation.appendChild(message); conversation.scrollTop = conversation.scrollHeight; } document.addEventListener('DOMContentLoaded', function () { try { const button = document.getElementById(buttonId); if (button) { button.addEventListener('click', sendToOllama); } else { console.warn('Button not found with ID:', buttonId); } const textarea = document.getElementById(textareaId); if (textarea) { textarea.addEventListener('keydown', function (event) { if (event.key === 'Enter' && !event.shiftKey) { event.preventDefault(); sendToOllama(); } }); textarea.focus(); } else { console.warn('Textarea not found with ID:', textareaId); } const savedLang = sessionStorage.getItem('ollama_lang'); if (savedLang) { console.log('Language found:', savedLang); } } catch (error) { console.error('Error initializing event listeners:', error); } });})(); </script> <style> #{{ options.conversationId }} { scroll-behavior: smooth; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; } #{{ options.conversationId }} .chat-message { padding: 8px 0; transition: background-color 0.3s ease; } #{{ options.conversationId }} .message-user { margin-bottom: 15px; } #{{ options.conversationId }} div pre, #{{ options.conversationId }} div code { color: #dc143c; padding: 0.5em; border-radius: 6px; overflow-x: auto; font-size: 0.95em; line-height: 1.5; font-weight: 900; } #{{ options.conversationId }} div pre { margin: 0.8em 0; background: #222222; font-weight: 100; position: relative; } #{{ options.conversationId }} div pre code { font-weight: 200; color: #fff; display: block; padding: 1em; } #{{ options.conversationId }} div h1, #{{ options.conversationId }} div h2, #{{ options.conversationId }} div h3 { font-weight: bold; margin: 0.8em 0 0.4em; color: #222; } #{{ options.conversationId }} div h1 { font-size: 1.5em; border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; } #{{ options.conversationId }} div h2 { font-size: 1.25em; padding-bottom: 0.2em; } #{{ options.conversationId }} div h3 { font-size: 1.1em; } #{{ options.conversationId }} div ul, #{{ options.conversationId }} div ol { margin: 0.5em 0 0.5em 1.5em; padding-left: 1em; } #{{ options.conversationId }} div li { margin: 0.3em 0; } #{{ options.conversationId }} div p { margin: 0.5em 0; line-height: 1.6; } #{{ options.conversationId }} div a { color: #dc143c; font-weight: 400; text-decoration: underline; } #{{ options.conversationId }} div blockquote { margin: 0.5em 0; padding-left: 1em; border-left: 3px solid #ccc; color: #666; font-style: italic; } #{{ options.conversationId }} div table { border-collapse: collapse; margin: 1em 0; width: 100%; } #{{ options.conversationId }} div th, #{{ options.conversationId }} div td { border: 1px solid #ddd; padding: 6px 13px; } #{{ options.conversationId }} div th { background-color: #f6f8fa; font-weight: 600; } em.loadAnsers{ color: #dc143c; font-weight : 100; } .spin-animation { display: inline-block; animation: spin360 1s linear infinite; } .pulse-animation { display: inline-block; animation: pulse 1s ease-in-out infinite; } @keyframes spin360 { from { transform: rotate(0deg); } to { transform: rotate(360deg); } } @keyframes pulse { 0% { transform: scale(1); opacity: 1; } 50% { transform: scale(1.3); opacity: 0.7; } 100% { transform: scale(1); opacity: 1; } } @media (max-width: 768px) { #{{ options.conversationId }} div pre { font-size: 0.9em; } #{{ options.conversationId }} div h1 { font-size: 1.3em; } #{{ options.conversationId }} div h2 { font-size: 1.15em; } } </style>
{% endmacro %}
{# --- End -- #}